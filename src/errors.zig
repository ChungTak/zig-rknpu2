const std = @import("std");
const c = @import("c.zig").c;

/// RKNPU2错误类型
pub const RknnError = error{
    Fail,
    Timeout,
    DeviceUnavailable,
    MallocFail,
    ParamInvalid,
    ModelInvalid,
    CtxInvalid,
    InputInvalid,
    OutputInvalid,
    DeviceUnmatch,
    IncompatiblePreCompileModel,
    IncompatibleOptimizationLevelVersion,
    TargetPlatformUnmatch,
    CpuArchUnmatch,
    NotImplement,
    InvalidHandle,
    DeviceUnavailableTemp,
    SharedMemInvalid,
    IncompatibleOptimizationLevel,
    IncompatibleDeviceId,
    UnsupportedDevice,
    DeviceUnavailableReasonUnknown,
    DeviceTimeout,
    DeviceBusy,
    DeviceFault,
    DeviceEnqueueFailed,
    DeviceAbort,
    DeviceReset,
    DeviceHang,
    DevicePower,
    DeviceThermal,
    DeviceReboot,
    DeviceSuspend,
    DeviceResume,
    DeviceShutdown,
    DeviceRestart,
    DeviceRecover,
    DeviceResetDriver,
    DeviceResetDevice,
    DeviceResetGpu,
    DeviceResetNpu,
    DeviceResetTpu,
    DeviceResetVpu,
    DeviceResetDsp,
    DeviceResetCpu,
    DeviceResetSystem,
    DeviceResetPower,
    DeviceResetThermal,
    DeviceResetReboot,
    DeviceResetSuspend,
    DeviceResetResume,
    DeviceResetShutdown,
    DeviceResetRestart,
    DeviceResetRecover,
    UnknownError,
};

/// 将C API错误码转换为Zig错误
pub fn mapRknnError(err_code: c_int) RknnError!void {
    return switch (err_code) {
        c.RKNN_SUCC => {},
        c.RKNN_ERR_FAIL => RknnError.Fail,
        c.RKNN_ERR_TIMEOUT => RknnError.Timeout,
        c.RKNN_ERR_DEVICE_UNAVAILABLE => RknnError.DeviceUnavailable,
        c.RKNN_ERR_MALLOC_FAIL => RknnError.MallocFail,
        c.RKNN_ERR_PARAM_INVALID => RknnError.ParamInvalid,
        c.RKNN_ERR_MODEL_INVALID => RknnError.ModelInvalid,
        c.RKNN_ERR_CTX_INVALID => RknnError.CtxInvalid,
        c.RKNN_ERR_INPUT_INVALID => RknnError.InputInvalid,
        c.RKNN_ERR_OUTPUT_INVALID => RknnError.OutputInvalid,
        c.RKNN_ERR_DEVICE_UNMATCH => RknnError.DeviceUnmatch,
        c.RKNN_ERR_INCOMPATILE_PRE_COMPILE_MODEL => RknnError.IncompatiblePreCompileModel,
        c.RKNN_ERR_INCOMPATILE_OPTIMIZATION_LEVEL_VERSION => RknnError.IncompatibleOptimizationLevelVersion,
        c.RKNN_ERR_TARGET_PLATFORM_UNMATCH => RknnError.TargetPlatformUnmatch,
        else => RknnError.UnknownError,
    };
}

/// 获取错误描述
pub fn getErrorDescription(err: RknnError) []const u8 {
    return switch (err) {
        RknnError.Fail => "操作失败",
        RknnError.Timeout => "操作超时",
        RknnError.DeviceUnavailable => "设备不可用",
        RknnError.MallocFail => "内存分配失败",
        RknnError.ParamInvalid => "参数无效",
        RknnError.ModelInvalid => "模型无效",
        RknnError.CtxInvalid => "上下文无效",
        RknnError.InputInvalid => "输入无效",
        RknnError.OutputInvalid => "输出无效",
        RknnError.DeviceUnmatch => "设备不匹配",
        RknnError.IncompatiblePreCompileModel => "预编译模型不兼容",
        RknnError.IncompatibleOptimizationLevelVersion => "优化级别版本不兼容",
        RknnError.TargetPlatformUnmatch => "目标平台不匹配",
        RknnError.CpuArchUnmatch => "CPU架构不匹配",
        RknnError.NotImplement => "功能未实现",
        RknnError.InvalidHandle => "句柄无效",
        RknnError.DeviceUnavailableTemp => "设备暂时不可用",
        RknnError.SharedMemInvalid => "共享内存无效",
        RknnError.IncompatibleOptimizationLevel => "优化级别不兼容",
        RknnError.IncompatibleDeviceId => "设备ID不兼容",
        RknnError.UnsupportedDevice => "不支持的设备",
        RknnError.DeviceUnavailableReasonUnknown => "设备不可用，原因未知",
        RknnError.DeviceTimeout => "设备超时",
        RknnError.DeviceBusy => "设备忙",
        RknnError.DeviceFault => "设备故障",
        RknnError.DeviceEnqueueFailed => "设备入队失败",
        RknnError.DeviceAbort => "设备中止",
        RknnError.DeviceReset => "设备重置",
        RknnError.DeviceHang => "设备挂起",
        RknnError.DevicePower => "设备电源问题",
        RknnError.DeviceThermal => "设备温度问题",
        RknnError.DeviceReboot => "设备重启",
        RknnError.DeviceSuspend => "设备挂起",
        RknnError.DeviceResume => "设备恢复",
        RknnError.DeviceShutdown => "设备关闭",
        RknnError.DeviceRestart => "设备重启",
        RknnError.DeviceRecover => "设备恢复",
        RknnError.DeviceResetDriver => "设备驱动重置",
        RknnError.DeviceResetDevice => "设备重置",
        RknnError.DeviceResetGpu => "GPU重置",
        RknnError.DeviceResetNpu => "NPU重置",
        RknnError.DeviceResetTpu => "TPU重置",
        RknnError.DeviceResetVpu => "VPU重置",
        RknnError.DeviceResetDsp => "DSP重置",
        RknnError.DeviceResetCpu => "CPU重置",
        RknnError.DeviceResetSystem => "系统重置",
        RknnError.DeviceResetPower => "电源重置",
        RknnError.DeviceResetThermal => "温度重置",
        RknnError.DeviceResetReboot => "重启重置",
        RknnError.DeviceResetSuspend => "挂起重置",
        RknnError.DeviceResetResume => "恢复重置",
        RknnError.DeviceResetShutdown => "关机重置",
        RknnError.DeviceResetRestart => "重启重置",
        RknnError.DeviceResetRecover => "恢复重置",
        RknnError.UnknownError => "未知错误",
    };
}
